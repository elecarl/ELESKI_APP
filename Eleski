package com.example.carl.carl_eleski;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import static android.content.ContentValues.TAG;


public class Eleski extends Activity {

    TextView txtArduino, txtString, txtStringLength, sensorView0, sensorView1, sensorView2, sensorView3;
    Handler bluetoothIn;
    private static final String TAG = "bluetooth";

    final int handlerState = 0;
    private BluetoothAdapter btAdapter = null;
    private BluetoothSocket btSocket = null;
    private StringBuilder recDataString = new StringBuilder();

    private ConnectedThread mConnectedThread;


    private static final UUID BTMODULEUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    private static String address;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.eleski);
       /* txtString = (TextView) findViewById(R.id.txtString);
        txtStringLength = (TextView) findViewById(R.id.testView1);
        sensorView0 = (TextView) findViewById(R.id.sensorView0);
        sensorView1 = (TextView) findViewById(R.id.sensorView1);
        sensorView2 = (TextView) findViewById(R.id.sensorView2);
        sensorView3 = (TextView) findViewById(R.id.sensorView3); */



         bluetoothIn = new Handler() {
            public void handleMessage(android.os.Message msg) {
                if (msg.what == handlerState) {
                    String readMessage = (String) msg.obj;
                    recDataString.append(readMessage);
                    int endOfLineIndex = recDataString.indexOf("~");
                    if (endOfLineIndex > 0) {
                        String dataInPrint = recDataString.substring(0, endOfLineIndex);
                        txtString.setText("Donnees recues = " + dataInPrint);
                        int dataLength = dataInPrint.length();
                        txtStringLength.setText("Longueur =" + String.valueOf(dataLength));
                        Log.d(TAG, "debut");

                        if (recDataString.charAt(0) == '#') {
                            String sensor0 = recDataString.substring(1, 5);
                            String sensor1 = recDataString.substring(6, 10);
                            String sensor2 = recDataString.substring(11, 15);
                            String sensor3 = recDataString.substring(16, 20);
                            sensorView0.setText("Acceleration =" + sensor0 + "m/s^2");
                            sensorView1.setText("Vitesse =" + sensor1 + "m/s");
                            sensorView2.setText("Pression =" + sensor2 + "Kpa");
                            sensorView3.setText("Temperature =" + sensor3 + "Celsius");
                            Log.d(TAG, "dfgdfgs");
                        }


                    }

                }
            }


        };


        btAdapter = BluetoothAdapter.getDefaultAdapter();
        checkBTState();


    }

    private BluetoothSocket createBluetoothSocket(BluetoothDevice device) throws IOException {

        return device.createRfcommSocketToServiceRecord(BTMODULEUUID);
    }

    @Override
    public void onResume() {
        super.onResume();

        Intent intent = getIntent();

        address = intent.getStringExtra(DeviceListActivity.EXTRA_DEVICE_ADDRESS);
        BluetoothDevice device = btAdapter.getRemoteDevice(address);

        try {
            btSocket = createBluetoothSocket(device);
        } catch (IOException e) {
            Toast.makeText(getBaseContext(), "Creation de socket a echoue", Toast.LENGTH_LONG).show();
        }
        try {
            btSocket.connect();
        } catch (IOException e) {
            try {
                btSocket.close();
            } catch (IOException e2) {

            }
        }


        mConnectedThread = new ConnectedThread(btSocket);
        mConnectedThread.start();
        mConnectedThread.m_Runnable.run();
        Log.d(TAG, "execution du thread");

        //mConnectedThread.write("x");

    }


    @Override
    public void onPause() {
        super.onPause();
        try {
            btSocket.close();
        } catch (IOException e2) {

        }
    }

    private void checkBTState() {

        if (btAdapter == null) {
            Toast.makeText(getBaseContext(), " BT n'est pas pris en charge", Toast.LENGTH_LONG).show();
        } else {
            if (btAdapter.isEnabled()) {
            } else {
                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(enableBtIntent, 1);
            }
        }
    }

    private class ConnectedThread extends Thread {
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;



        public ConnectedThread(BluetoothSocket socket) {
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
            }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;

        }

            private final Runnable m_Runnable = new Runnable() {
                public void run() {

                    byte[] buffer = new byte[256];
                    int bytes;
                    Log.d(TAG, "ceci est le thread");


                    while (true)

                    {
                        try {
                            txtString = (TextView) findViewById(R.id.txtString);
                            txtStringLength = (TextView) findViewById(R.id.testView1);
                            sensorView0 = (TextView) findViewById(R.id.sensorView0);
                            sensorView1 = (TextView) findViewById(R.id.sensorView1);
                            sensorView2 = (TextView) findViewById(R.id.sensorView2);
                            sensorView3 = (TextView) findViewById(R.id.sensorView3);

                            bytes = mmInStream.read(buffer);
                            String readMessage = new String(buffer, 0, bytes);
                            bluetoothIn.obtainMessage(handlerState, bytes, -1, readMessage).sendToTarget();
                            Eleski.this.bluetoothIn.postDelayed(m_Runnable,250);
                            Log.d(TAG, "validation...");
                        } catch (IOException e) {
                            break;
                        }

                    }
                }
            };


                public void write(String input) {
                    byte[] msgBuffer = input.getBytes();
                    try {
                        mmOutStream.write(msgBuffer);
                    } catch (IOException e) {
                        Toast.makeText(getBaseContext(), "echec de la connection", Toast.LENGTH_LONG).show();
                        finish();
                    }
                }
            };
            }







